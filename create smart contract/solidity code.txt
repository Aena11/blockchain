// hadcoin ICO

//version of comiler
pragma solidity ^0.4.11;


contract hadcoin_ico {
    //introducing the maximum number of hadcoin avilable for sale 
    uint public max_hadcoin = 1000000;
    
    //intoducing the usd to hadcoins conversion rate 
    uint public usd_to_hadcoins=1000;
    
    //itroducing the total number of hadcoin that have been bought by the investors
    uint public total_hadcoins_bought = 0;
    
    //mapping from the investor address to its equality in headcoins and usd_to_hadcoins
    mapping(address => uint) equity_hadcoins;
    mapping(address => uint) equity_usd;
    
    //checking if an ivestor can buy hadcoins
    modifier can_buy_hadcoins(uint usd_invested){
        require(usd_invested*usd_to_hadcoins + total_hadcoins_bought<= max_hadcoin);
        _;
    }
    
    //getting the equity in hadcoin of an investor
    function equity_in_hadcoins(address investor) external constant returns(uint){
        return equity_hadcoins[investor];
    }
      //getting the equity in usd of an investor
    function equity_in_usd(address investor) external constant returns(uint){
        return equity_usd[investor];
    }
    
    //buying hadcoins
    function buy_hadcoins(address investor,uint usd_invested)external
    can_buy_hadcoins(usd_invested){
        uint hadcoin_bought = usd_invested *usd_to_hadcoins;
        equity_hadcoins[investor] += hadcoin_bought;
        equity_usd[investor] = equity_hadcoins[investor]/1000;
        total_hadcoins_bought += hadcoin_bought;
    }
    //selling hadcoins
    function sell_hadcoins(address investor,uint hadcoin_sold)external
    {
        equity_hadcoins[investor] -= hadcoin_sold;
        equity_usd[investor] = equity_hadcoins[investor]/1000;
        total_hadcoins_bought -= hadcoin_sold;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
}